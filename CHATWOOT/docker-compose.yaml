services:
  chatwoot_redis:
    image: redis:alpine
    restart: always
    command: [ "sh", "-c", "redis-server --requirepass chatwoot" ]
    volumes:
      - chatwoot_redis_data:/data

  chatwoot_postgres:
    image: postgres:12
    restart: always
    volumes:
      - chatwoot_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=chatwoot

  rails:
    image: chatwoot/chatwoot:latest
    volumes:
      - chatwoot_data:/app/storage
    depends_on:
      - chatwoot_postgres
      - chatwoot_redis
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=replace_with_lengthy_secure_hex
      - FRONTEND_URL=http://host.docker.internal:3000
      - FORCE_SSL=false
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://chatwoot_redis:6379
      - REDIS_PASSWORD=chatwoot
      - POSTGRES_HOST=chatwoot_postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - LOG_LEVEL=info
      - LOG_SIZE=500
      - ENABLE_PUSH_RELAY_SERVER=true
      - DEFAULT_LOCALE=pt_BR
      - MAILER_SENDER_EMAIL=Chatwoot <vitor@svsolution.com.br>
      - SMTP_DOMAIN=svsolution.com.br
      - SMTP_ADDRESS=smtp.hostinger.com
      - SMTP_PORT=465
      - SMTP_USERNAME=vitor@svsolution.com.br
      - SMTP_PASSWORD=senha
      - SMTP_AUTHENTICATION=login
      - SMTP_OPENSSL_VERIFY_MODE=none
      - SMTP_TLS=true
      - SMTP_SSL=true
    entrypoint: docker/entrypoints/rails.sh
    command:
      [ 'bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0' ]

  sidekiq:
    image: chatwoot/chatwoot:latest
    volumes:
      - chatwoot_data:/app/storage
    depends_on:
      - chatwoot_postgres
      - chatwoot_redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SECRET_KEY_BASE=replace_with_lengthy_secure_hex
      - FRONTEND_URL=http://host.docker.internal:3000
      - FORCE_SSL=false
      - ENABLE_ACCOUNT_SIGNUP=false
      - REDIS_URL=redis://chatwoot_redis:6379
      - REDIS_PASSWORD=chatwoot
      - POSTGRES_HOST=chatwoot_postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=chatwoot
      - ACTIVE_STORAGE_SERVICE=local
      - RAILS_LOG_TO_STDOUT=true
      - LOG_LEVEL=info
      - LOG_SIZE=500
      - ENABLE_PUSH_RELAY_SERVER=true
      - DEFAULT_LOCALE=pt_BR
      - MAILER_SENDER_EMAIL=Chatwoot <vitor@svsolution.com.br>
      - SMTP_DOMAIN=svsolution.com.br
      - SMTP_ADDRESS=smtp.hostinger.com
      - SMTP_PORT=465
      - SMTP_USERNAME=vitor@svsolution.com.br
      - SMTP_PASSWORD=@cessoSvsolution1996
      - SMTP_AUTHENTICATION=login
      - SMTP_OPENSSL_VERIFY_MODE=none
      - SMTP_TLS=true
      - SMTP_SSL=true
    command:
      [ 'bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml' ]

  evolution:
    image: davidsongomes/evolution-api:latest
    restart: always
    ports:
      - 8080:8080
    environment:
      # Server URL - Set your application url
      - SERVER_URL=http://host.docker.internal:8080
      # Cors - * for all or set separate by commas -  ex.: 'yourdomain1.com, yourdomain2.com'
      - CORS_ORIGIN=*
      - CORS_METHODS=POST,GET,PUT,DELETE
      - CORS_CREDENTIALS=true
      # Determine the logs to be displayed
      - LOG_LEVEL=ERROR,WARN,DEBUG,INFO,LOG,VERBOSE,DARK,WEBHOOKS
      - LOG_COLOR=true
      # Log Baileys - "fatal" | "error" | "warn" | "info" | "debug" | "trace"
      - LOG_BAILEYS=error
      # Determine how long the instance should be deleted from memory in case of no connection.
      # Default time: 5 minutes
      # If you don't even want an expiration, enter the value false
      - DEL_INSTANCE=false
      # Temporary data storage
      - STORE_MESSAGES=true
      - STORE_MESSAGE_UP=true
      - STORE_CONTACTS=true
      - STORE_CHATS=true
      # Set Store Interval in Seconds (7200 = 2h)
      - CLEAN_STORE_CLEANING_INTERVAL=7200
      - CLEAN_STORE_MESSAGES=true
      - CLEAN_STORE_MESSAGE_UP=true
      - CLEAN_STORE_CONTACTS=true
      - CLEAN_STORE_CHATS=true
      # Permanent data storage
      - DATABASE_ENABLED=false
      - DATABASE_CONNECTION_URI=mongodb://root:root@mongodb:27017/?authSource=admin&readPreference=primary&ssl=false&directConnection=true
      - DATABASE_CONNECTION_DB_PREFIX_NAME=evdocker
      # Choose the data you want to save in the application's database or store
      - DATABASE_SAVE_DATA_INSTANCE=false
      - DATABASE_SAVE_DATA_NEW_MESSAGE=false
      - DATABASE_SAVE_MESSAGE_UPDATE=false
      - DATABASE_SAVE_DATA_CONTACTS=false
      - DATABASE_SAVE_DATA_CHATS=false
      - REDIS_ENABLED=false
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evdocker
      - RABBITMQ_ENABLED=false
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      - WEBSOCKET_ENABLED=false
      # Global Webhook Settings
      # Each instance's Webhook URL and events will be requested at the time it is created
      ## Define a global webhook that will listen for enabled events from all instances
      - WEBHOOK_GLOBAL_URL=''
      - WEBHOOK_GLOBAL_ENABLED=false
      # With this option activated, you work with a url per webhook event, respecting the global url and the name of each event
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      ## Set the events you want to hear  
      - WEBHOOK_EVENTS_APPLICATION_STARTUP=false
      - WEBHOOK_EVENTS_QRCODE_UPDATED=true
      - WEBHOOK_EVENTS_MESSAGES_SET=true
      - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
      - WEBHOOK_EVENTS_MESSAGES_UPDATE=true
      - WEBHOOK_EVENTS_MESSAGES_DELETE=true
      - WEBHOOK_EVENTS_SEND_MESSAGE=true
      - WEBHOOK_EVENTS_CONTACTS_SET=true
      - WEBHOOK_EVENTS_CONTACTS_UPSERT=true
      - WEBHOOK_EVENTS_CONTACTS_UPDATE=true
      - WEBHOOK_EVENTS_PRESENCE_UPDATE=true
      - WEBHOOK_EVENTS_CHATS_SET=true
      - WEBHOOK_EVENTS_CHATS_UPSERT=true
      - WEBHOOK_EVENTS_CHATS_UPDATE=true
      - WEBHOOK_EVENTS_CHATS_DELETE=true
      - WEBHOOK_EVENTS_GROUPS_UPSERT=true
      - WEBHOOK_EVENTS_GROUPS_UPDATE=true
      - WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE=true
      - WEBHOOK_EVENTS_CONNECTION_UPDATE=true
      - WEBHOOK_EVENTS_CALL=true
      # This event fires every time a new token is requested via the refresh route
      - WEBHOOK_EVENTS_NEW_JWT_TOKEN=false
      # This events is used with Typebot
      - WEBHOOK_EVENTS_TYPEBOT_START=false
      - WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS=false
      # This event is used with Chama AI
      - WEBHOOK_EVENTS_CHAMA_AI_ACTION=false
      # This event is used to send errors
      - WEBHOOK_EVENTS_ERRORS=false
      - WEBHOOK_EVENTS_ERRORS_WEBHOOK=
      # Name that will be displayed on smartphone connection
      - CONFIG_SESSION_PHONE_CLIENT=SV Solution
      # Browser Name = Chrome | Firefox | Edge | Opera | Safari
      - CONFIG_SESSION_PHONE_NAME=Chrome
      # Set qrcode display limit
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#198754
      # Defines an authentication type for the api
      # We recommend using the apikey because it will allow you to use a custom token,
      # if you use jwt, a random token will be generated and may be expired and you will have to generate a new token
      # jwt or 'apikey'
      - AUTHENTICATION_TYPE=apikey
      ## Define a global apikey to access all instances.
      ### OBS: This key must be inserted in the request header to create an instance.
      - AUTHENTICATION_API_KEY=B6D711FCDE4D4FD5936544120E713976
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      ## Set the secret key to encrypt and decrypt your token and its expiration time
      # seconds - 3600s ===1h | zero (0) - never expires
      - AUTHENTICATION_JWT_EXPIRIN_IN=0
      - AUTHENTICATION_JWT_SECRET='L=0YWt]b2w[WF>#>:&E`'
    command: ['node', './dist/src/main.js']
    expose:
      - 8080

volumes:
  chatwoot_data:
    external: true
  chatwoot_postgres_data:
    external: true
  chatwoot_redis_data:
    external: true